CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)

PROJECT(SamsungPrj)

SET(MY_DIR ${PROJECT_SOURCE_DIR})

# Enabling c++11
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
IF(COMPILER_SUPPORTS_CXX11)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
ELSEIF(COMPILER_SUPPORTS_CXX0X)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
ELSE()
	MESSAGE(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
ENDIF()

FIND_PACKAGE(OpenCV REQUIRED)
FIND_PACKAGE(OpenMVG REQUIRED)
FIND_PACKAGE(Boost REQUIRED COMPONENTS filesystem)

SET(INCLUDE_DIRS
	${OPENMVG_INCLUDE_DIRS}
	${OpenCV_INCLUDE_DIRS}
	${Boost_INCLUDE_DIRS}
	"${MY_DIR}/include"
)

SET(LIBRARIES
	${OPENMVG_LIBRARIES}
	${OpenCV_LIBRARIES}
	${Boost_LIBRARIES}
)

SET(SOURCES
	src/Utility.cpp
	src/Calibration.cpp
	src/FindCameraMatrices.cpp
	src/Triangulation.cpp
)

SET(EXECUTABLE_OUTPUT_PATH ${MY_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${MY_DIR}/lib)

LINK_DIRECTORIES(
	${Boost_LIBRARY_DIRS}
)

ADD_LIBRARY(sfm OBJECT ${SOURCES})
set_target_properties(sfm PROPERTIES POSITION_INDEPENDENT_CODE 1)
ADD_LIBRARY(sfmshared SHARED $<TARGET_OBJECTS:sfm>)
ADD_LIBRARY(sfmstatic STATIC $<TARGET_OBJECTS:sfm>)
set_target_properties(sfmshared PROPERTIES OUTPUT_NAME sfm)
set_target_properties(sfmstatic PROPERTIES OUTPUT_NAME sfm)
MESSAGE("Linking with these libraries: ${LIBRARIES}")

INCLUDE_DIRECTORIES(${INCLUDE_DIRS})

TARGET_LINK_LIBRARIES(sfmshared ${LIBRARIES})
ADD_EXECUTABLE(main main.cpp)
TARGET_LINK_LIBRARIES(main sfmshared)
